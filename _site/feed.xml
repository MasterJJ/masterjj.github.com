<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>MasterJ</title>
    <description>Hello MasterJ Blog</description>
    <link>http://localhost:4000//</link>
    <atom:link href="http://localhost:4000//feed.xml" rel="self" type="application/rss+xml"/>
    <pubDate>Thu, 07 Jun 2018 13:44:01 +0900</pubDate>
    <lastBuildDate>Thu, 07 Jun 2018 13:44:01 +0900</lastBuildDate>
    <generator>Jekyll v3.8.3</generator>
    
      <item>
        <title>How to Install atftp on raspberry</title>
        <description>&lt;p&gt;tftp 는 항상 문제다  네트워크 컨디션 과 임베디드 장치 특성상 
개발단계 의 디바이스는 항상 불안정하고  스트레스를 유발한다.&lt;/p&gt;

&lt;p&gt;본격 개발도 시작못했는데 말이지…&lt;/p&gt;

&lt;p&gt;네트워크 컨디션이 안좋으면 tftp 다운에만 의존하는 환경에서는 죽을 맛이다.&lt;/p&gt;

&lt;p&gt;uboot 에서 지원하는 tftp.c client 는  미치도록 느리고 미치도록 약하다.&lt;/p&gt;

&lt;p&gt;retry count max 조차 10 으로 지정되어있어서 매번 실패를 하고 이어받기가 아닌 재시작……&lt;/p&gt;

&lt;p&gt;심하면 하루종일 되지도 않는다. 그럴땐 100이상으로 uboot code tftp.c 에서 수정해주면된다.&lt;/p&gt;

&lt;p&gt;미안하다 이제 본편&lt;/p&gt;

&lt;p&gt;빌어먹을 라즈베리파이 는 tftp 설정 중에 정상동작하질 않는다. 1시간 이상 삽질했는데 tftp-hpa 로 상태가 안좋다.&lt;/p&gt;

&lt;p&gt;왜그러니..버그니 ?  리포팅된거 보니 버그다 .&lt;/p&gt;

&lt;p&gt;다른 패키지를 찾아보니 atftp 라는 녀석이 있다. 간단하고 테스트 해보니 기존 tftp 보다 빠르다.&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;
    &lt;h2 id=&quot;설치&quot;&gt;설치&lt;/h2&gt;
    &lt;p&gt;~~~~
apt-get install atftpd
apt-get install atftp&lt;/p&gt;
  &lt;/li&gt;
&lt;/ol&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----------------

위 두패키지는 데몬서비스와 클라이언트를 같이 설치 한다.  클라이언트 는 그냥 테스트를위해 설치했다.


2. 설정
-----------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sudo vi /etc/default/atftpd&lt;/p&gt;

&lt;p&gt;USE_INETD=true  수정  USE_INETD=false&lt;/p&gt;

&lt;p&gt;/srv/tftp  수정  /tftpboot&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----------------
설정은 별로 할게 없어서 간단하게 따라하시길 
tftp 설정은 어려울게 없다. 
다만 tftp 디렉토리 설정시 권한 문제가 있을수도 있다.


3. tftp 디렉토리 설정
-----------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;sudo mkdir /tftpboot&lt;/p&gt;

&lt;p&gt;sudo chmod -R 777 /tftpboot&lt;/p&gt;

&lt;p&gt;sudo chown -R nobody /tftpboot&lt;/p&gt;

&lt;p&gt;sudo /etc/init.d/atftpd restart&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----------------

자연스럽게 root 하위 /tftpboot 를 고전적으로 생성후 
권한 설정 해주고 서비스 재시작 


4. tftp 테스트
-----------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;atftp 192.168.0.2&lt;/p&gt;

&lt;p&gt;atftp&amp;gt; put test.txt&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;-----------------
test.txt 파일을 /tftpboot 에 밀어넣는 테스트 이다. 잘되면 끝..

성능은 훨씬 좋았다.


ref
http://www.ubuntugeek.com/howto-setup-advanced-tftp-server-in-ubuntu.html

-----------------
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;p&gt;bundle update
bundle exec jekyll build
bundle exec jekyll serve
~~~~
—————–&lt;/p&gt;

</description>
        <pubDate>Wed, 16 May 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2018/05/how-to-install-atftp-on-raspberry.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/05/how-to-install-atftp-on-raspberry.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>jekyll not working Mac 10.13 Fix</title>
        <description>&lt;p&gt;jekyll 을 쓰다 보면. 여러 PC에서 사용하게 되는데 
보통 MacBookPro 에서 환경하다가 IMac에서 추가로 
사용하게 되었다.
하지만 iMac은 안되네&lt;/p&gt;

&lt;p&gt;os 가 다르지는 않지만 맥북은 좀더 낮은 버전에서 업그레이드 한거고 
아이맥은 영입한순간부터 최신OS 하이시에라 였다.&lt;/p&gt;

&lt;p&gt;이유는 ruby 와 gem 플러그인등을을 설치할때
/usr/bin 을 사용하는데. 10.13 버전에서는 해당 위치가&lt;/p&gt;

&lt;p&gt;시스템 무결성 강화로 인해 일반/관리자 계정 으로도 수정할수 없는 
wheel 계정 권한으로 소속되어진것. 일반 사용자 가아니라 
시스템 고유의 권한 계정이다. (일반적인 방법으로는 수정할수없다.)&lt;/p&gt;

&lt;p&gt;jekyll 에서도 해당 버전에 대한 호환 문제에 대하여 언급하고 있지만 
사실상 해결 방법은 다르지 않는가 ?   일단 이미 사용하고 있엇으니&lt;/p&gt;

&lt;p&gt;아래 방법을 정리한다.
참고 링크
http://jekyllrb-ko.github.io/docs/troubleshooting/&lt;/p&gt;

&lt;p&gt;기존에 설치 jekyll 과 그외 설치 정보는 알아서 삭제 해두자&lt;/p&gt;

&lt;p&gt;jeykyll 설치 위치 변경
(여기서 관련페이지보면 sudo 왠만하면 쓰지 말라는데 뭐 조심해서 쓰길,
 sudo를 습관처럼 쓰고있다면 안좋은 습관이다)&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;sudo gem install -n /usr/local/bin jekyll
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;ruby 설치 위치 변경 with brew
brew 를 이용한 ruby 설치는 워낙 많이 사용하니 더이상 설명안하겠다.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ruby -e &quot;$(curl -fsSL https://raw.githubusercontent.com/Homebrew/install/master/install)&quot;

brew install ruby
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;설치는 잘될것이다.
brew 를 보통 사용하는데 ruby 만은 brew 보다는 
/usr/local  하위는 사용자가 수정가능한. 안전한 공간으로 정해놓았다.&lt;/p&gt;

&lt;p&gt;환경변수 PATH 에 해당 위치도 추가해준다.&lt;/p&gt;

&lt;p&gt;사용자 하위 .bash_profile  파일에 다음을 추가한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;export PATH=/usr/local/bin:$PATH
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;뭐여기 까지는 jekyll troubleshooting 페이지에
한글로 자세히 설명되어있는 부분이다.
이후에 생기는 문제는 jekyll 을 이미 운영중에 다른환경에서 사용시
문제가 되는것을 해결하는 것 이다.&lt;/p&gt;

&lt;p&gt;jekyll 파일 구조에서 Gemfiie.lock 파일을 보면
지원가능한 라이브러리 버전 요구사항 등이 정리되어있다.
jekyll serve 명령을 통해 실행하려고 하면 버전이 맞지 않는다고 안됨.&lt;/p&gt;

&lt;p&gt;그럼 운영하려는 환경에서만 지원 가능한 Gemfile.lock 으로 다시 초기화 해야한다.
물론 Gemfile.lock 은 환경별로 자주 변경하면 자꾸 귀찮아지니
커밋은 하지 않았다.&lt;/p&gt;

&lt;p&gt;간단한 스크립트로 필요시 초기화 하도록 추가했다.
아래 명령어다.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;bundle update
bundle exec jekyll build
bundle exec jekyll serve
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;번들을 이용해 현재 gem파일등을 업데이트 한다.
jekyll 설정을 새로빌드하고
jekyll 을 서빙 한다.&lt;/p&gt;

&lt;p&gt;뭐대충 이렇게 하니까 동작하드라.&lt;/p&gt;

&lt;p&gt;잘알지도 못하는 jekyll 과 ruby 로 이런걸 해결하려니
커뮤니티 검색은 필수였다.&lt;/p&gt;

&lt;p&gt;아래 참고한 링크다.&lt;/p&gt;

&lt;p&gt;http://talk.jekyllrb.com/t/gemfile-requests-liquid-3-0-6/254&lt;/p&gt;

</description>
        <pubDate>Wed, 14 Feb 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2018/02/jekyll-not-working-on-imac-10.13.x.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/02/jekyll-not-working-on-imac-10.13.x.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Python pip install error on mac</title>
        <description>&lt;p&gt;Mac 에서 Python 트레이닝 중 생긴 문제&lt;/p&gt;

&lt;p&gt;pip  python 패키지 관리자를 설치하려던 도중 
다음과 같은 실패를 경험한다.
brew upgrade python&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;iMac:github masterj$ brew upgrade python
==&amp;gt; Upgrading 1 outdated package, with result:
python 2.7.14_2
==&amp;gt; Upgrading python
==&amp;gt; Installing dependencies for python: pkg-config, gdbm
==&amp;gt; Installing python dependency: pkg-config
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
Error: Failure while executing: git config --local --replace-all homebrew.private true
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;
&lt;p&gt;brew 업그레이드를 해봐도 
python 을 다시 설치해봐도 안됨..
아래 와 같은 내용을 찾았다.&lt;/p&gt;

&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;just to close this out... I upgraded to Sierra and initially got this error

Ryans-MacBook-Pro:~ ryanc$ brew install rosie
Updating Homebrew...
==&amp;gt; Homebrew has enabled anonymous aggregate user behaviour analytics.
Read the analytics documentation (and how to opt-out) here:
https://git.io/brew-analytics

xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
Error: Failure while executing: git config --local --replace-all homebrew.analyticsmessage true
==&amp;gt; Installing rosie from jamiejennings/rosie
==&amp;gt; Installing dependencies for jamiejennings/rosie/rosie: readline
==&amp;gt; Installing jamiejennings/rosie/rosie dependency: readline
xcrun: error: invalid active developer path (/Library/Developer/CommandLineTools), missing xcrun at: /Library/Developer/CommandLineTools/usr/bin/xcrun
Error: Failure while executing: git config --local --replace-all homebrew.private true

With help from this forum post -&amp;gt; http://tips.tutorialhorizon.com/2015/10/01/xcrun-error-invalid-active-developer-path-library-developer-commandline-tools-missing-xcrun/

I ran this to install xcode, which cleared up the install failure.

Ryans-MacBook-Pro:~ ryanc$ xcode-select --install
xcode-select: note: install requested for command line developer tools

Ryans-MacBook-Pro:~ ryanc$ brew install rosie
Updating Homebrew...
==&amp;gt; Installing rosie from jamiejennings/rosie
==&amp;gt; Cloning https://github.com/jamiejennings/rosie-pattern-language.git
Cloning into '/Users/ryanc/Library/Caches/Homebrew/rosie--git'...
remote: Counting objects: 136, done.
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;
&lt;hr /&gt;

&lt;p&gt;원문 https://github.com/jamiejennings/homebrew-rosie/issues/1&lt;/p&gt;

&lt;p&gt;어째든 저 개발자는 roise 라고 하는패키지를 설치하고 싶었는데 동일하게 설치가 안됬음
그래서 xcode-select –install 명령어로 xcode-select 라고 하는걸 설치함&lt;/p&gt;

&lt;p&gt;그리고 나서는 모든 패키지가 잘설치 되었다는 내용 
맥프레에는 그렇게 해놓고는 까먹엇던것 같다. (저용량 내머리…)&lt;/p&gt;

&lt;p&gt;어째든 저방법으로 해결..&lt;/p&gt;

&lt;p&gt;터미널에서 xcode-select –install 실행 하길&lt;/p&gt;

</description>
        <pubDate>Thu, 18 Jan 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2018/01/python-pip-install-error-on-mac.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/01/python-pip-install-error-on-mac.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>The Best Partition Tool</title>
        <description>&lt;p&gt;일반 데스크탑 pc 에서 윈도우와 우분투 듀얼부팅을 자주하던 나는&lt;/p&gt;

&lt;p&gt;윈도우 업데이트시 가끔 grub partition 을 자주 날려먹기에&lt;/p&gt;

&lt;p&gt;넘나 귀찮다고 느끼던중 linux partition 을 윈도우 디스크관리자에서 지워버렷다.&lt;/p&gt;

&lt;p&gt;복구가  쉽게 되리라 생각했지만&lt;/p&gt;

&lt;p&gt;ext4 파티션으로 만 떡칠되어 있던 디스크는 디스크관리 유틸에서 보여질생각을 안한다.&lt;/p&gt;

&lt;p&gt;너무 짜증남….&lt;/p&gt;

&lt;p&gt;(MBR 레코드가 망가졋거나 아니면 Ubuntu 가 좋아하는포맺으로 파티션이 이루어져 있으면 문제다)&lt;/p&gt;

&lt;p&gt;여러 다른 유틸을 사용해보려했는데… 유료인점  참으로 열받는다.&lt;/p&gt;

&lt;p&gt;그래서 다음 방법을 추천한다.&lt;/p&gt;

&lt;p&gt;ubuntu 가상 모드로 부팅시킨다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;ubuntu 시디 또는 USB 로 부팅해서 trial 또는 guest mode 로 부팅한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;부팅이 되면  터미널 에서 gnome-disks  명령어를 실행한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;~$ gnome-disks&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;실행하면 gnome 그래픽 기반의 UI 가 실행되고 보이지 않던 디스크가 보인다.&lt;/p&gt;

&lt;p&gt;나는 여기서 해당 녀석의 파티션을 - 버튼을 클릭하여 다 삭제 하였다.
추가로 해당 화면에서 + 버튼을 통해 파티션을 추가하면서 원하는 포맺으로 구성할수있다.
진행이 완료되면 CD 또는USB 타입의 설치디스크를 제거하고 부팅 ~~~
볼륨 문자를 지정하지 않았기때문에 윈도우 (디스크관리자) 에서 새디스크를 추가하듯이 문자를 할당하면된다.
(윈도우에서 다시 재포맺해야 한다 윈도우에서 포맺되지 않은 파티션이라고 뭐라한다. )
그후 윈도우에서 해당 디스크가 다시 보이는것을 알수있다.&lt;/p&gt;

</description>
        <pubDate>Tue, 02 Jan 2018 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2018/01/best-partition-tool.html</link>
        <guid isPermaLink="true">http://localhost:4000//2018/01/best-partition-tool.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>goahead webserver on ubuntu</title>
        <description>&lt;p&gt;Embedded Webserver Goahead 를 빌드해서 ubuntu 에올려보려 한다.&lt;/p&gt;

&lt;p&gt;OS ubuntu16.04 x64&lt;/p&gt;

&lt;p&gt;기본 패키지 설치 
sudo apt-get -y vim git builld-essential&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;goahead 는 여러플랫폼을 지원하는데&lt;/p&gt;

&lt;p&gt;linux 환경에 대해서는 뭔가 쫌 부족하게 설명해놧다 내가 느끼기에는&lt;/p&gt;

&lt;p&gt;linux make 명령으로 하면 뭔가 잘안된다.  귀찮아..&lt;/p&gt;

&lt;p&gt;보면 기본 make 명령 말고 makeme 라는  빌드툴로 하게 되어있는데 좀 귀찮지만
이것도 사전에 빌드해서 설치 해놔야한다.&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;git clone https://github.com/embedthis/makeme&lt;/p&gt;

&lt;p&gt;make boot&lt;/p&gt;

&lt;p&gt;sudo make install&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;goahead 를 다운받고 빌드할 차례&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;git clone https://github.com/embedthis/goahead&lt;/p&gt;

&lt;p&gt;./configure&lt;/p&gt;

&lt;p&gt;me&lt;/p&gt;

&lt;p&gt;sudo me install&lt;/p&gt;

&lt;p&gt;sudo me run&lt;/p&gt;

&lt;hr /&gt;
&lt;p&gt;goahead 웹서버가 동작한다는 메세지가 나온다.&lt;/p&gt;

&lt;p&gt;goahead: 2: Configuration for Embedthis GoAhead
……&lt;/p&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;goahead: 2: Started http://*:80
goahead: 2: Started https://*:443
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;p&gt;파이어폭스나  웹브라우져로 localhost 주소에 접속하면 다음과 같은 간단한 웹페이지 메세지를 볼수있다.
  Congratulations! The server is up and running.
임베디드 웹서버라 그런지 Tomcat 이나 여타 다른 웹서버 처럼 이미지가 있거나 그렇지 않다.
심플하네…&lt;/p&gt;

</description>
        <pubDate>Fri, 03 Nov 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2017/11/goahead-on-ubuntu.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/11/goahead-on-ubuntu.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>redis build raspberrypi3</title>
        <description>&lt;p&gt;라즈베리3 에서 핫하다는 redis 를 빌드 해보기로했다.&lt;/p&gt;

&lt;p&gt;필요한 최소한의 패키지 설치
sudo apt-get install -y git build-essential&lt;/p&gt;

&lt;p&gt;redis 를 다운받는다.
git clone https://github.com/antirez/redis&lt;/p&gt;

&lt;p&gt;빌드 진행은 간단하다
make&lt;/p&gt;

&lt;p&gt;sd카드가 클래스10 이라 그런지 매우느리지는 않다 . 원래 일반 인텔 cpu 에서도 나름 빠르게 빌드된다.&lt;/p&gt;

&lt;p&gt;테스트 
make test&lt;/p&gt;

&lt;p&gt;테스트 도중 실패 하는것을 볼수있다.
~~
You need tcl 8.5 or newer in order to run the Redis test
Makefile:242: recipe for target ‘test’ failed
make[1]: &lt;em&gt;** [test] Error 1
make[1]: Leaving directory ‘/home/masterj/github/redis/src’
Makefile:6: recipe for target ‘test’ failed
make: **&lt;/em&gt; [test] Error 2
~~&lt;/p&gt;

&lt;p&gt;tcl 패키지가 버전이 낮다네 .&lt;/p&gt;

&lt;p&gt;패키지 업그레이드 
tcl 패키지는 (Tool Command Language) 의 약자
(https://www.renesas.com/en-us/products/software-tools/tools/ide/hew–tcl-tk-extension.html)
~~
sudo apt-get install -y tcl
~~
다시 시도 
make test&lt;/p&gt;

&lt;p&gt;테스트 과정은 기능이 많아서 그런지 꽤오래 걸린다.&lt;/p&gt;
</description>
        <pubDate>Sat, 21 Oct 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2017/10/redis-build-raspberrypi3.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/10/redis-build-raspberrypi3.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>OpenSource Licens List</title>
        <description>&lt;p&gt;“펌,  KLDP wiki”&lt;/p&gt;

&lt;p&gt;3.2.1. GPL 2.0&lt;/p&gt;

&lt;p&gt;GPL은 현재 가장 많은 OpenSource 소프트웨어가 채택하고 있는 라이센스이다. OpenSource 라이센스들 중에서 가장 많이 알려져 있고 의무사항들도 타 라이센스에 비해 엄격한 편이다. GPL의 주요 내용은 다음과 같다.&lt;/p&gt;

&lt;p&gt;소프트웨어를 배포하는 경우 저작권 표시, 보증책임이 없다는 표시 및 GPL에 의해 배포된다는 사실 명시
소프트웨어를 수정하거나 새로운 소프트웨어를 링크(Static과 Dynamic linking 모두)시키는 경우 GPL에 의해 소스 코드 제공해야 함.
Object Code 또는 Executable Form으로 GPL 소프트웨어를 배포하는 경우, 소스 코드 그 자체를 함께 배포하거나 또는 소스코드를 제공받을 수 있는 방법에 대한 정보 함께 제공해야 함
자신의 특허를 구현한 프로그램을 GPL로 배포할 때는 GPL 조건을 준수하는 이용자에게는 로열티를 받을 수 없으며, 제3자의 특허인 경우에도 특허권자가 Royalty-Free 형태의 라이센스를 제공해야만 해당 특허 기술을 구현한 프로그램을 GPL로 배포하는 것이 가능&lt;/p&gt;

&lt;p&gt;GPL 소프트웨어를 사용하였을 경우 “본 제품(소프트웨어)는 GPL 라이센스 하에 배포되는 소프트웨어 XXX(사용한 GPL 소프트웨어 이름)를 포함합니다”와 같은 문구를 매뉴얼 혹은 그에 준하는 매체에 포함시키고, GPL 전문을 첨부해야 한다.&lt;/p&gt;

&lt;p&gt;GPL에서 가장 논란이 되는 부분은 소스코드 공개 범위이다. 실제 소스코드 공개 범위는 다음 장의 쟁점 부분에서 확인하기로 한다. 소스코드를 공개하기 위해서는 소스코드를 CD Rom 등의 매체에 담아서 제품판매시 함께 배포하거나, 매뉴얼에 소스코드를 요청할 수 있는 연락처를 기입하여 두거나, 혹은 FTP 서버, 웹서버 등에 소스코드를 업로드해 두고 매뉴얼에 해당 주소를 기입하면 된다.&lt;/p&gt;

&lt;p&gt;최근 특허에 관한 쟁점도 중요성이 증가하고 있는데, 자세한 내용은 다음 장의 쟁점 부분에서 설명한다.&lt;/p&gt;

&lt;p&gt;3.2.2. LGPL 2.1&lt;/p&gt;

&lt;p&gt;FSF가 일부 Library에 GPL보다 다소 완화된 형태인 GNU Lesser General Public License (LGPL)를 만들어 사용하고 있는 이유는 오픈 소스 소프트웨어의 사용을 장려하기 위한 전략적인 차원에서이다. 만일 상용 Library와 동일한 기능을 제공하는 Library에 GNU와 같은 엄격한 라이센스를 적용하게 되면, 개발자들이 Library의 사용을 꺼려할 것이다. 오히려 이미 널리 사용되고 있는 상용 Library와 동일한 기능을 제공하는 Library를 LGPL로 배포하여 그 사용을 장려하고 사실상의 표준으로 유도하는 한편, 관련된 다른 오픈 소스 소프트웨어를 보다 더 많이 사용할 수 있도록 하겠다는 것이 FSF의 전략이다. LGPL Version 2.1은 GNU ‘Library’ General Public License version 2.0의 후속 버전이다. 일부 한정된 Library에 대해서만 LGPL을 사용하려는 것이 FSF의 의도였으나 ‘Library’란 단어가 라이센스 이름에 포함되어 개발자들이 모든 Library를 위한 라이센스로 오인하는 경향이 있었다. 결국 이러한 오인을 방지하기 위하여 ‘Library’를 ‘Lesser’로 수정하였을 뿐 기본적인 내용은 동일하기 때문에 Version 2.1으로 표기한 것이다. LGPL의 주요 내용을 요약하면 다음과 같다.&lt;/p&gt;

&lt;p&gt;소프트웨어를 배포하는 경우 저작권 표시, 보증책임이 없다는 표시 및 LGPL에 의해 배포된다는 사실 명시
LGPL Library의 일부를 수정하는 경우 수정한 Library를 LGPL에 의해 소스 코드 공개
LGPL Library에 응용프로그램을 링크시킬(Static과 Dynamic Linking 모두) 경우 해당 응용프로그램의 소스를 공개할 필요 없음. 다만 사용자가 Library 수정 후 동일한 실행 파일을 생성할 수 있도록 Static Linking시에는 응용프로그램의 Object Code를 제공해야 함
특허의 경우 GPL과 동일함&lt;/p&gt;

&lt;p&gt;LGPL은 링크하는 소프트웨어의 소스코드를 공개할 필요가 없다는 점이 GPL과 가장 큰 차이점이다. 여하한 경우에도 LGPL 소프트웨어 자체는 공개해야 하지만 LGPL 소프트웨어와 링크되는 부분의 소프트웨어 소스코드는 공개해야 할 의무가 발생하지 않으므로 기업의 입장에서는 LGPL 소프트웨어를 좀더 선호하게 된다. 사용 여부 명시 등은 GPL과 동일하게 반영하면 되고 공개해야 할 소스코드의 공개 역시 GPL과 동일한 방식을 이용하면 된다.&lt;/p&gt;

&lt;p&gt;3.2.3. BSD License&lt;/p&gt;

&lt;p&gt;BSD(Berkeley Software Distribution) 라이센스는 GPL/LGPL보다 덜 제한적이기 때문에 허용범위가 넓다. 이는 BSD 라이센스로 배포되는 프로젝트가 미국 정부에서 제공한 재원으로 운영되었기 때문이다. GPL과의 차이점 중 가장 중요한 사항은 BSD 라이센스는는 소스코드 공개의 의무가 없다는 점이다. 따라서 BSD 라이센스의 소스 코드를 이용하여 새로운 프로그램을 개발하여도 새로운 프로그램의 소스 코드를 공개하지 않고 BSD가 아닌 다른 라이센스를 적용하여 판매할 수 있다. 주요 내용을 요약하면 다음과 같다.&lt;/p&gt;

&lt;p&gt;소프트웨어를 배포하는 경우 저작권 표시, 보증책임이 없다는 표시
수정 프로그램에 대한 소스 코드의 공개를 요구하지 않기 때문에 상용 소프트웨어에 무제한 사용가능&lt;/p&gt;

&lt;p&gt;3.2.4. Apache License&lt;/p&gt;

&lt;p&gt;아파치 라이센스는 아파치 웹서버를 포함한 아파치 재단(ASF: Apache Software Foundation)의 모든 소프트웨어에 적용되며 BSD 라이센스와 비슷하여 소스코드 공개 등의 의무가 발생하지 않는다. 다만 “Apache”라는 이름에 대한 상표권을 침해하지 않아야 한다는 조항이 명시적으로 들어가 있고, 특허권에 관한 내용이 포함되어 BSD 라이센스보다는 좀더 법적으로 완결된 내용을 담고 있다. 특히 Apache License 2.0에서 특허에 관한 조항이 삽입되어 GPL 2.0으로 배포되는 코드와 결합되는 것이 어렵다는 문제가 었었는데, GPL 3.0(안)에서는 이 문제를 해결하여 아파치 라이센스로 배포되는 코드가 GPL 3.0으로 배포되는 코드와 결합하는 것이 가능해졌다.&lt;/p&gt;

&lt;p&gt;3.2.5. MPL(Mozilla Public License)&lt;/p&gt;

&lt;p&gt;MPL은 Netscape 브라우저의 소스코드를 공개하기 위해 개발된 라이센스이다. MPL은 공개하여야할 소스코드의 범위를 좀더 명확하게 정의하였다. GPL에서는 링크되는 소프트웨어의 소스코드를 포함하여 공개하여야 할 소스코드의 범위가 모호하게 정의되어 있지만 MPL에서는 링크 등의 여부에 상관없이 원래의 소스코드가 아닌 새로운 파일에 작성된 소스코드에 대해서는 공개의 의무가 발생하지 않는다. 따라서 MPL 소프트웨어 그 자체는 어떻게 하든 공개를 해야 하지만 원래 소스코드에 없던 새로운 파일들은 공개하여야 할 의무가 발생하지 않으므로 GPL에 비해 훨씬 명확하다. 주요 내용을 요약하면 다음과 같다.&lt;/p&gt;

&lt;p&gt;소프트웨어를 배포하는 경우 저작권 표시, 보증책임이 없다는 표시 및 MPL에 의해 배포된다는 사실을 명시
  MPL 코드를 수정한 부분은 다시 MPL에 의해 배포
  MPL 코드와 다른 코드를 결합하여 프로그램을 만들 경우 MPL 코드를 제외한 결합 프로그램에 대한 소스코드는 공개할 필요가 없음
  소스코드를 적절한 형태로 제공하는 경우, 실행파일에 대한 라이센스는 MPL이 아닌 다른 것으로 선택가능
  특허기술이 구현된 프로그램의 경우 관련 사실을 ‘LEGAL’파일에 기록하여 배포&lt;/p&gt;
</description>
        <pubDate>Fri, 25 Aug 2017 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2017/08/OpenSource-Licens.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/08/OpenSource-Licens.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Welcome to Jekyll!</title>
        <description>&lt;p&gt;You’ll find this post in your &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory. Go ahead and edit it and re-build the site to see your changes. You can rebuild the site in many different ways, but the most common way is to run &lt;code class=&quot;highlighter-rouge&quot;&gt;jekyll serve&lt;/code&gt;, which launches a web server and auto-regenerates your site when a file is updated.&lt;/p&gt;

&lt;p&gt;To add new posts, simply add a file in the &lt;code class=&quot;highlighter-rouge&quot;&gt;_posts&lt;/code&gt; directory that follows the convention &lt;code class=&quot;highlighter-rouge&quot;&gt;YYYY-MM-DD-name-of-post.ext&lt;/code&gt; and includes the necessary front matter. Take a look at the source for this post to get an idea about how it works.&lt;/p&gt;

&lt;p&gt;Jekyll also offers powerful support for code snippets:&lt;/p&gt;

&lt;figure class=&quot;highlight&quot;&gt;&lt;pre&gt;&lt;code class=&quot;language-ruby&quot; data-lang=&quot;ruby&quot;&gt;&lt;span class=&quot;k&quot;&gt;def&lt;/span&gt; &lt;span class=&quot;nf&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
  &lt;span class=&quot;nb&quot;&gt;puts&lt;/span&gt; &lt;span class=&quot;s2&quot;&gt;&quot;Hi, &lt;/span&gt;&lt;span class=&quot;si&quot;&gt;#{&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;name&lt;/span&gt;&lt;span class=&quot;si&quot;&gt;}&lt;/span&gt;&lt;span class=&quot;s2&quot;&gt;&quot;&lt;/span&gt;
&lt;span class=&quot;k&quot;&gt;end&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;print_hi&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Tom'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;
&lt;span class=&quot;c1&quot;&gt;#=&amp;gt; prints 'Hi, Tom' to STDOUT.&lt;/span&gt;&lt;/code&gt;&lt;/pre&gt;&lt;/figure&gt;

&lt;p&gt;Check out the &lt;a href=&quot;https://jekyllrb.com/docs/home&quot;&gt;Jekyll docs&lt;/a&gt; for more info on how to get the most out of Jekyll. File all bugs/feature requests at &lt;a href=&quot;https://github.com/jekyll/jekyll&quot;&gt;Jekyll’s GitHub repo&lt;/a&gt;. If you have questions, you can ask them on &lt;a href=&quot;https://talk.jekyllrb.com/&quot;&gt;Jekyll Talk&lt;/a&gt;.&lt;/p&gt;

</description>
        <pubDate>Fri, 19 May 2017 23:52:30 +0900</pubDate>
        <link>http://localhost:4000//2017/05/welcome-to-jekyll.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/05/welcome-to-jekyll.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Make the World</title>
        <description>&lt;p&gt;I have first blog!&lt;br /&gt;
Thankyou Jekyll&lt;/p&gt;

&lt;p&gt;This is my github blog for my loging developer story, and note.&lt;/p&gt;

</description>
        <pubDate>Fri, 19 May 2017 23:52:30 +0900</pubDate>
        <link>http://localhost:4000//2017/05/make-the-wolrd.html</link>
        <guid isPermaLink="true">http://localhost:4000//2017/05/make-the-wolrd.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
      <item>
        <title>Hello</title>
        <description>&lt;p&gt;Hello Jekyll&lt;/p&gt;
</description>
        <pubDate>Sat, 26 Sep 2015 00:00:00 +0900</pubDate>
        <link>http://localhost:4000//2015/09/hello.html</link>
        <guid isPermaLink="true">http://localhost:4000//2015/09/hello.html</guid>
        
        
        <category>jekyll</category>
        
        <category>update</category>
        
      </item>
    
  </channel>
</rss>
